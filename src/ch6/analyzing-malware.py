#!/usr/bin/env python

# Author: SPSE-3232
# Purpose:
# Create API monitors for the following:
# - registry writes to "run on login/boot"
# - opening/writing of files
# - send/recv on network

# Once you create the above framework, get a malware or program sample and test against it

from pydbg import *
#from pydgb.defines import *
import argparse
import os


def generic_bp(dbg):
    print('Function called:')
    print('Data:', dbg.dump_context(dbg.context))
    return DBG_CONTINUE


parser = argparse.ArgumentParser(description='Crash Dump')
parser.add_argument('-f', '--file', help='file.', required=True)
args = parser.parse_args()

if not os.path.exists(args.file):
    print('File not found!')
    exit(1)

os.system('start "{file}"'.format(file=args.file))

dbg = pydbg()
for (pid, name) in dbg.enumerate_processes():
    if name.lower() == args.file:
        dbg.attach(pid)

functions_list = {
    'send': 'ws2_32',
    'recv': 'ws2_32',
    'OpenFile': 'Kernel32',
    'ReadFile': 'Kernel32',
    'WriteFile': 'Kernel32',
    'RegCreateKeyEx': 'Advapi32',
    'RegSetKeyValue': 'Advapi32',
    'RegSetValueEx': 'Advapi32'
}

for function_name, dll_name in functions_list:
    function_address = dbg.func_resolve(dll_name, function_name)
    dbg.bp_set(function_address, description=function_name+' Breakpoint', handler=generic_bp)